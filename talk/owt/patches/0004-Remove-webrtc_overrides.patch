From ab6a5c4fc8de53ef49ccec5255f6bf266bb5ffc9 Mon Sep 17 00:00:00 2001
From: Qiu Jianlin <jianlin.qiu@intel.com>
Date: Thu, 14 Nov 2019 16:03:42 +0800
Subject: [PATCH] Remove webrtc_overrides

---
 webrtc_overrides/BUILD.gn                     | 111 ---------
 webrtc_overrides/DEPS                         |   7 -
 webrtc_overrides/OWNERS                       |   6 -
 webrtc_overrides/README.chromium              |  20 --
 webrtc_overrides/field_trial.cc               |  15 --
 webrtc_overrides/init_webrtc.cc               |  45 ----
 webrtc_overrides/init_webrtc.h                |  13 -
 webrtc_overrides/metrics.cc                   |  57 -----
 .../rtc_base/diagnostic_logging.h             | 125 ----------
 webrtc_overrides/rtc_base/event.cc            |  40 ---
 webrtc_overrides/rtc_base/event.h             |  47 ----
 webrtc_overrides/rtc_base/gtest_prod_util.h   |  10 -
 webrtc_overrides/rtc_base/logging.cc          | 230 ------------------
 webrtc_overrides/rtc_base/logging.h           | 119 ---------
 webrtc_overrides/task_queue_factory.cc        | 146 -----------
 webrtc_overrides/task_queue_factory.h         |  21 --
 16 files changed, 1012 deletions(-)
 delete mode 100644 webrtc_overrides/BUILD.gn
 delete mode 100644 webrtc_overrides/DEPS
 delete mode 100644 webrtc_overrides/OWNERS
 delete mode 100644 webrtc_overrides/README.chromium
 delete mode 100644 webrtc_overrides/field_trial.cc
 delete mode 100644 webrtc_overrides/init_webrtc.cc
 delete mode 100644 webrtc_overrides/init_webrtc.h
 delete mode 100644 webrtc_overrides/metrics.cc
 delete mode 100644 webrtc_overrides/rtc_base/diagnostic_logging.h
 delete mode 100644 webrtc_overrides/rtc_base/event.cc
 delete mode 100644 webrtc_overrides/rtc_base/event.h
 delete mode 100644 webrtc_overrides/rtc_base/gtest_prod_util.h
 delete mode 100644 webrtc_overrides/rtc_base/logging.cc
 delete mode 100644 webrtc_overrides/rtc_base/logging.h
 delete mode 100644 webrtc_overrides/task_queue_factory.cc
 delete mode 100644 webrtc_overrides/task_queue_factory.h

diff --git a/webrtc_overrides/BUILD.gn b/webrtc_overrides/BUILD.gn
deleted file mode 100644
index 4483d304ddf..00000000000
--- a/webrtc_overrides/BUILD.gn
+++ /dev/null
@@ -1,111 +0,0 @@
-# Copyright 2017 The Chromium Authors. All rights reserved.
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//build/config/chromecast_build.gni")
-
-group("webrtc_overrides") {
-  public_deps = [
-    ":webrtc",
-  ]
-}
-
-source_set("webrtc") {
-  public_deps = [
-    # TODO(kjellander): Start cleaning up this target as soon as
-    # https://codereview.chromium.org/2022833002/ is landed. The target should
-    # be removed entirely if possible.
-    "//third_party/webrtc/rtc_base:rtc_base_approved",
-  ]
-  deps = [
-    "//third_party/webrtc/p2p:rtc_p2p",
-  ]
-
-  # When Chromium is built for NACL or Chromecast, WebRTC provides a
-  # field_trial implementation so there is no need to depend on
-  # ":field_trial".
-  # This configuration happens here:
-  # https://cs.chromium.org/chromium/src/third_party/webrtc/webrtc.gni?l=44-51&rcl=95c56eebe0a2b31ad5752138d15b431124e17d36
-  if (!is_chromecast && !is_nacl) {
-    # When Chromium doesn't build for NaCL or Chromecast, WebRTC doesn't
-    # provide an implementation for field_trial and a custom one (that uses
-    # base/metrics/field_trial.h is provided).
-    deps += [
-      ":field_trial",
-      "//base",
-    ]
-  }
-
-  configs += [ "//third_party/webrtc:common_config" ]
-  public_configs = [ "//third_party/webrtc:common_inherited_config" ]
-}
-
-static_library("init_webrtc") {
-  sources = [
-    "init_webrtc.cc",
-    "init_webrtc.h",
-  ]
-  configs += [ "//third_party/webrtc:common_config" ]
-  public_configs = [
-    "//third_party/webrtc:common_inherited_config",
-
-    # TODO(mbonadei): Abseil config propagation is needed because
-    # WebRTC's BUILD.gn files don't use `public_deps`, there are
-    # good reasons for this, but they may disappear in the future.
-    # In that case it is ok to remove these two lines.
-    "//third_party/abseil-cpp:absl_include_config",
-    "//third_party/abseil-cpp:absl_define_config",
-  ]
-  public_deps = [
-    ":libjingle_webrtc_common",
-  ]
-  deps = [
-    ":metrics",
-    "//base",
-    "//third_party/webrtc/rtc_base",
-    "//third_party/webrtc/system_wrappers",
-  ]
-}
-
-static_library("metrics") {
-  sources = [
-    "metrics.cc",
-  ]
-  deps = [
-    "//base",
-  ]
-}
-
-static_library("field_trial") {
-  sources = [
-    "field_trial.cc",
-  ]
-  deps = [
-    "//base",
-  ]
-}
-
-source_set("libjingle_webrtc_common") {
-  configs += [ "//third_party/webrtc:common_config" ]
-  public_configs = [ "//third_party/webrtc:common_inherited_config" ]
-
-  deps = [
-    ":webrtc",
-    "//third_party/webrtc/media:rtc_media",
-    "//third_party/webrtc/media:rtc_media_base",
-    "//third_party/webrtc/pc:libjingle_peerconnection",
-    "//third_party/webrtc/pc:rtc_pc",
-    "//third_party/webrtc/system_wrappers",
-  ]
-}
-
-source_set("task_queue_factory") {
-  sources = [
-    "task_queue_factory.cc",
-    "task_queue_factory.h",
-  ]
-  deps = [
-    "//base",
-    "//third_party/webrtc/api/task_queue",
-  ]
-}
diff --git a/webrtc_overrides/DEPS b/webrtc_overrides/DEPS
deleted file mode 100644
index a191f6dbec7..00000000000
--- a/webrtc_overrides/DEPS
+++ /dev/null
@@ -1,7 +0,0 @@
-include_rules = [
-  '+base',
-  '+build',
-  '+net/base',
-  '+third_party/webrtc',
-  '+third_party/webrtc_overrides',
-]
diff --git a/webrtc_overrides/OWNERS b/webrtc_overrides/OWNERS
deleted file mode 100644
index 5f3540dc792..00000000000
--- a/webrtc_overrides/OWNERS
+++ /dev/null
@@ -1,6 +0,0 @@
-grunell@chromium.org
-mbonadei@chromium.org
-tommi@chromium.org
-
-# COMPONENT: Blink>WebRTC
-# TEAM: webrtc-dev@chromium.org
diff --git a/webrtc_overrides/README.chromium b/webrtc_overrides/README.chromium
deleted file mode 100644
index 5ed2ca74f4e..00000000000
--- a/webrtc_overrides/README.chromium
+++ /dev/null
@@ -1,20 +0,0 @@
-Name: WebRTC
-URL: http://www.webrtc.org
-Version: 0
-Revision: 0
-License: BSD
-License File: ../webrtc/LICENSE
-Security Critical: yes
-
-Description:
-This folder contains WebRTC files (third_party/webrtc) that should be
-overridden. The reason for this folder to be separate from third_party/webrtc is
-that WebRTC is pulled directly into third_party/webrtc and the overrides need to
-be in the Chromium repo since they depend on Chromium code.
-
-For information on WebRTC, see third_party/webrtc/README.chromium.
-
-Third party code used in this project is described in the file
-third_party/webrtc/LICENSE_THIRD_PARTY.
-
-Local Modifications:
diff --git a/webrtc_overrides/field_trial.cc b/webrtc_overrides/field_trial.cc
deleted file mode 100644
index 878e6cc576b..00000000000
--- a/webrtc_overrides/field_trial.cc
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "base/metrics/field_trial.h"
-
-// Define webrtc::field_trial::FindFullName to provide webrtc with a field trial
-// implementation.
-namespace webrtc {
-namespace field_trial {
-std::string FindFullName(const std::string& trial_name) {
-  return base::FieldTrialList::FindFullName(trial_name);
-}
-}  // namespace field_trial
-}  // namespace webrtc
diff --git a/webrtc_overrides/init_webrtc.cc b/webrtc_overrides/init_webrtc.cc
deleted file mode 100644
index db086b6f758..00000000000
--- a/webrtc_overrides/init_webrtc.cc
+++ /dev/null
@@ -1,45 +0,0 @@
-// Copyright 2013 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "init_webrtc.h"
-
-#include "base/command_line.h"
-#include "base/files/file_path.h"
-#include "base/files/file_util.h"
-#include "base/logging.h"
-#include "base/native_library.h"
-#include "base/path_service.h"
-#include "base/trace_event/trace_event.h"
-#include "third_party/webrtc/rtc_base/event_tracer.h"
-#include "third_party/webrtc/system_wrappers/include/cpu_info.h"
-#include "third_party/webrtc_overrides/rtc_base/logging.h"
-
-const unsigned char* GetCategoryGroupEnabled(const char* category_group) {
-  return TRACE_EVENT_API_GET_CATEGORY_GROUP_ENABLED(category_group);
-}
-
-void AddTraceEvent(char phase,
-                   const unsigned char* category_group_enabled,
-                   const char* name,
-                   unsigned long long id,
-                   int num_args,
-                   const char** arg_names,
-                   const unsigned char* arg_types,
-                   const unsigned long long* arg_values,
-                   unsigned char flags) {
-  base::trace_event::TraceArguments args(num_args, arg_names, arg_types,
-                                         arg_values);
-  TRACE_EVENT_API_ADD_TRACE_EVENT(phase, category_group_enabled, name,
-                                  trace_event_internal::kGlobalScope, id, &args,
-                                  flags);
-}
-
-bool InitializeWebRtcModule() {
-  // Workaround for crbug.com/176522
-  // On Linux, we can't fetch the number of cores after the sandbox has been
-  // initialized, so we call DetectNumberOfCores() here, to cache the value.
-  webrtc::CpuInfo::DetectNumberOfCores();
-  webrtc::SetupEventTracer(&GetCategoryGroupEnabled, &AddTraceEvent);
-  return true;
-}
diff --git a/webrtc_overrides/init_webrtc.h b/webrtc_overrides/init_webrtc.h
deleted file mode 100644
index f5e6efbd38e..00000000000
--- a/webrtc_overrides/init_webrtc.h
+++ /dev/null
@@ -1,13 +0,0 @@
-// Copyright 2013 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_INIT_WEBRTC_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_INIT_WEBRTC_H_
-
-// Initialize WebRTC. Call this explicitly to initialize WebRTC module
-// (before initializing the sandbox in Chrome) and hook up Chrome+WebRTC
-// integration such as common logging and tracing.
-bool InitializeWebRtcModule();
-
-#endif // THIRD_PARTY_WEBRTC_OVERRIDES_INIT_WEBRTC_H_
diff --git a/webrtc_overrides/metrics.cc b/webrtc_overrides/metrics.cc
deleted file mode 100644
index 2284046bc60..00000000000
--- a/webrtc_overrides/metrics.cc
+++ /dev/null
@@ -1,57 +0,0 @@
-// Copyright 2018 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "base/metrics/histogram.h"
-#include "base/metrics/sparse_histogram.h"
-
-namespace webrtc {
-
-// Define webrtc::metrics functions to provide webrtc with implementations.
-namespace metrics {
-
-// This class doesn't actually exist, so don't go looking for it :)
-// This type is just fwd declared here in order to use it as an opaque type
-// between the Histogram functions in this file.
-class Histogram;
-
-Histogram* HistogramFactoryGetCounts(
-    const std::string& name, int min, int max, int bucket_count) {
-  return reinterpret_cast<Histogram*>(
-      base::Histogram::FactoryGet(name, min, max, bucket_count,
-          base::HistogramBase::kUmaTargetedHistogramFlag));
-}
-
-Histogram* HistogramFactoryGetCountsLinear(
-    const std::string& name, int min, int max, int bucket_count) {
-  return reinterpret_cast<Histogram*>(
-      base::LinearHistogram::FactoryGet(name, min, max, bucket_count,
-          base::HistogramBase::kUmaTargetedHistogramFlag));
-}
-
-Histogram* HistogramFactoryGetEnumeration(
-    const std::string& name, int boundary) {
-  return reinterpret_cast<Histogram*>(
-      base::LinearHistogram::FactoryGet(name, 1, boundary, boundary + 1,
-          base::HistogramBase::kUmaTargetedHistogramFlag));
-}
-
-Histogram* SparseHistogramFactoryGetEnumeration(const std::string& name,
-                                                int boundary) {
-  return reinterpret_cast<Histogram*>(base::SparseHistogram::FactoryGet(
-      name, base::HistogramBase::kUmaTargetedHistogramFlag));
-}
-
-const char* GetHistogramName(Histogram* histogram_pointer) {
-  base::HistogramBase* ptr =
-      reinterpret_cast<base::HistogramBase*>(histogram_pointer);
-  return ptr->histogram_name();
-}
-
-void HistogramAdd(Histogram* histogram_pointer, int sample) {
-  base::HistogramBase* ptr =
-      reinterpret_cast<base::HistogramBase*>(histogram_pointer);
-  ptr->Add(sample);
-}
-}  // namespace metrics
-}  // namespace webrtc
diff --git a/webrtc_overrides/rtc_base/diagnostic_logging.h b/webrtc_overrides/rtc_base/diagnostic_logging.h
deleted file mode 100644
index e8d31254cae..00000000000
--- a/webrtc_overrides/rtc_base/diagnostic_logging.h
+++ /dev/null
@@ -1,125 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_DIAGNOSTIC_LOGGING_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_DIAGNOSTIC_LOGGING_H_
-
-#include <sstream>
-#include <string>
-
-#include "third_party/webrtc/api/scoped_refptr.h"
-#include "third_party/webrtc/rtc_base/checks.h"
-
-namespace rtc {
-
-//////////////////////////////////////////////////////////////////////
-// Note that the non-standard LoggingSeverity aliases exist because they are
-// still in broad use.  The meanings of the levels are:
-//  LS_SENSITIVE: Information which should only be logged with the consent
-//   of the user, due to privacy concerns.
-//  LS_VERBOSE: This level is for data which we do not want to appear in the
-//   normal debug log, but should appear in diagnostic logs.
-//  LS_INFO: Chatty level used in debugging for all sorts of things, the default
-//   in debug builds.
-//  LS_WARNING: Something that may warrant investigation.
-//  LS_ERROR: Something that should not have occurred.
-//  LS_NONE: Set this as minimum severity to disable logging.
-// Note that LoggingSeverity is mapped over to chromiums verbosity levels where
-// anything lower than or equal to the current verbosity level is written to
-// file which is the opposite of logging severity in libjingle where higher
-// severity numbers than or equal to the current severity level are written to
-// file. Also, note that the values are explicitly defined here for convenience
-// since the command line flag must be set using numerical values.
-// TODO(tommi): To keep things simple, we should just use the same values for
-// these constants as Chrome does.
-enum LoggingSeverity {
-  LS_NONE = 0,
-  LS_ERROR = 1,
-  LS_WARNING = 2,
-  LS_INFO = 3,
-  LS_VERBOSE = 4,
-  LS_SENSITIVE = 5,
-  INFO = LS_INFO,
-  WARNING = LS_WARNING,
-  LERROR = LS_ERROR
-};
-
-// LogErrorContext assists in interpreting the meaning of an error value.
-enum LogErrorContext {
-  ERRCTX_NONE,
-  ERRCTX_ERRNO,     // System-local errno
-  ERRCTX_HRESULT,   // Windows HRESULT
-  ERRCTX_OSSTATUS,  // MacOS OSStatus
-
-  // Abbreviations for LOG_E macro
-  ERRCTX_EN = ERRCTX_ERRNO,     // LOG_E(sev, EN, x)
-  ERRCTX_HR = ERRCTX_HRESULT,   // LOG_E(sev, HR, x)
-  ERRCTX_OS = ERRCTX_OSSTATUS,  // LOG_E(sev, OS, x)
-};
-
-// Class that writes a log message to the logging delegate ("WebRTC logging
-// stream" in Chrome) and to Chrome's logging stream.
-class DiagnosticLogMessage {
- public:
-  DiagnosticLogMessage(const char* file,
-                       int line,
-                       LoggingSeverity severity,
-                       LogErrorContext err_ctx,
-                       int err);
-  DiagnosticLogMessage(const char* file,
-                       int line,
-                       LoggingSeverity severity,
-                       LogErrorContext err_ctx,
-                       int err,
-                       const char* module);
-  ~DiagnosticLogMessage();
-
-  void CreateTimestamp();
-
-  std::ostream& stream() { return print_stream_; }
-
- private:
-  const char* file_name_;
-  const int line_;
-  const LoggingSeverity severity_;
-  const LogErrorContext err_ctx_;
-  const int err_;
-  const char* const module_;
-  const bool log_to_chrome_;
-
-  std::ostringstream print_stream_;
-};
-
-// This class is used to explicitly ignore values in the conditional
-// logging macros.  This avoids compiler warnings like "value computed
-// is not used" and "statement has no effect".
-class LogMessageVoidify {
- public:
-  LogMessageVoidify() {}
-  // This has to be an operator with a precedence lower than << but
-  // higher than ?:
-  void operator&(std::ostream&) {}
-};
-
-//////////////////////////////////////////////////////////////////////
-// Logging Helpers
-//////////////////////////////////////////////////////////////////////
-
-class LogMessage {
- public:
-  static void LogToDebug(int min_sev);
-};
-
-// TODO(grunell): Change name to InitDiagnosticLoggingDelegate or
-// InitDiagnosticLogging. Change also in init_webrtc.h/cc.
-// TODO(grunell): typedef the delegate function.
-void InitDiagnosticLoggingDelegateFunction(
-    void (*delegate)(const std::string&));
-
-void SetExtraLoggingInit(
-    void (*function)(void (*delegate)(const std::string&)));
-
-}  // namespace rtc
-
-#endif  // THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_DIAGNOSTIC_LOGGING_H_
diff --git a/webrtc_overrides/rtc_base/event.cc b/webrtc_overrides/rtc_base/event.cc
deleted file mode 100644
index f81232c0acb..00000000000
--- a/webrtc_overrides/rtc_base/event.cc
+++ /dev/null
@@ -1,40 +0,0 @@
-// Copyright 2017 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "third_party/webrtc_overrides/rtc_base/event.h"
-
-#include "base/time/time.h"
-
-namespace rtc {
-
-using base::WaitableEvent;
-
-Event::Event() : Event(false, false) {}
-
-Event::Event(bool manual_reset, bool initially_signaled)
-    : event_(manual_reset ? WaitableEvent::ResetPolicy::MANUAL
-                          : WaitableEvent::ResetPolicy::AUTOMATIC,
-             initially_signaled ? WaitableEvent::InitialState::SIGNALED
-                                : WaitableEvent::InitialState::NOT_SIGNALED) {}
-
-Event::~Event() {}
-
-void Event::Set() {
-  event_.Signal();
-}
-
-void Event::Reset() {
-  event_.Reset();
-}
-
-bool Event::Wait(int give_up_after_ms) {
-  if (give_up_after_ms == kForever) {
-    event_.Wait();
-    return true;
-  }
-
-  return event_.TimedWait(base::TimeDelta::FromMilliseconds(give_up_after_ms));
-}
-
-}  // namespace rtc
diff --git a/webrtc_overrides/rtc_base/event.h b/webrtc_overrides/rtc_base/event.h
deleted file mode 100644
index 47a34cdac76..00000000000
--- a/webrtc_overrides/rtc_base/event.h
+++ /dev/null
@@ -1,47 +0,0 @@
-// Copyright 2017 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_EVENT_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_EVENT_H_
-
-#include "base/macros.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/threading/thread_restrictions.h"
-
-namespace rtc {
-
-// Overrides WebRTC's internal event implementation to use Chromium's.
-class Event {
- public:
-  static const int kForever = -1;
-
-  Event();
-  Event(bool manual_reset, bool initially_signaled);
-  ~Event();
-
-  void Set();
-  void Reset();
-
-  // Wait for the event to become signaled, for the specified number of
-  // milliseconds.  To wait indefinetly, pass kForever.
-  bool Wait(int give_up_after_ms);
-  bool Wait(int give_up_after_ms, int /*warn_after_ms*/) {
-    return Wait(give_up_after_ms);
-  }
-
- private:
-  base::WaitableEvent event_;
-  DISALLOW_COPY_AND_ASSIGN(Event);
-};
-
-// Pull ScopedAllowBaseSyncPrimitives(ForTesting) into the rtc namespace.
-// Managing what types in WebRTC are allowed to use
-// ScopedAllowBaseSyncPrimitives, is done via thread_restrictions.h.
-using ScopedAllowBaseSyncPrimitives = base::ScopedAllowBaseSyncPrimitives;
-using ScopedAllowBaseSyncPrimitivesForTesting =
-    base::ScopedAllowBaseSyncPrimitivesForTesting;
-
-}  // namespace rtc
-
-#endif  // THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_EVENT_H_
diff --git a/webrtc_overrides/rtc_base/gtest_prod_util.h b/webrtc_overrides/rtc_base/gtest_prod_util.h
deleted file mode 100644
index d57937aa63b..00000000000
--- a/webrtc_overrides/rtc_base/gtest_prod_util.h
+++ /dev/null
@@ -1,10 +0,0 @@
-// Copyright 2017 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_GTEST_PROD_UTIL_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_GTEST_PROD_UTIL_H_
-
-#include "base/gtest_prod_util.h"
-
-#endif  // THIRD_PARTY_WEBRTC_OVERRIDES_RTC_BASE_GTEST_PROD_UTIL_H_
diff --git a/webrtc_overrides/rtc_base/logging.cc b/webrtc_overrides/rtc_base/logging.cc
deleted file mode 100644
index d10fd254db1..00000000000
--- a/webrtc_overrides/rtc_base/logging.cc
+++ /dev/null
@@ -1,230 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// NOTE:
-// Since this file includes Chromium headers, it must not include
-// third_party/webrtc/rtc_base/logging.h since it defines some of the same
-// macros as Chromium does and we'll run into conflicts.
-
-#if defined(WEBRTC_MAC) && !defined(WEBRTC_IOS)
-#include <CoreServices/CoreServices.h>
-#endif  // OS_MACOSX
-
-#include <algorithm>
-#include <iomanip>
-
-#include "base/atomicops.h"
-#include "base/logging.h"
-#include "base/strings/string_util.h"
-#include "base/threading/platform_thread.h"
-#include "third_party/webrtc/rtc_base/string_utils.h"
-
-// This needs to be included after base/logging.h.
-#include "third_party/webrtc_overrides/rtc_base/diagnostic_logging.h"
-#include "third_party/webrtc_overrides/rtc_base/logging.h"
-
-#if defined(WEBRTC_MAC)
-#include "base/mac/mac_logging.h"
-#endif
-
-// Disable logging when fuzzing, for performance reasons.
-// WEBRTC_UNSAFE_FUZZER_MODE is defined by WebRTC's BUILD.gn when
-// built with use_libfuzzer or use_drfuzz.
-#if defined(WEBRTC_UNSAFE_FUZZER_MODE)
-#define WEBRTC_ENABLE_LOGGING false
-#else
-#define WEBRTC_ENABLE_LOGGING true
-#endif
-
-// From this file we can't use VLOG since it expands into usage of the __FILE__
-// macro (for correct filtering). The actual logging call from DIAGNOSTIC_LOG in
-// ~DiagnosticLogMessage. Note that the second parameter to the LAZY_STREAM
-// macro is not used since the filter check has already been done for
-// DIAGNOSTIC_LOG.
-#define LOG_LAZY_STREAM_DIRECT(file_name, line_number, sev)              \
-  LAZY_STREAM(logging::LogMessage(file_name, line_number, sev).stream(), \
-              WEBRTC_ENABLE_LOGGING)
-
-namespace rtc {
-
-void (*g_logging_delegate_function)(const std::string&) = NULL;
-void (*g_extra_logging_init_function)(
-    void (*logging_delegate_function)(const std::string&)) = NULL;
-#ifndef NDEBUG
-static_assert(sizeof(base::subtle::Atomic32) == sizeof(base::PlatformThreadId),
-              "Atomic32 not same size as PlatformThreadId");
-base::subtle::Atomic32 g_init_logging_delegate_thread_id = 0;
-#endif
-
-/////////////////////////////////////////////////////////////////////////////
-// Log helper functions
-/////////////////////////////////////////////////////////////////////////////
-
-inline int WebRtcSevToChromeSev(LoggingSeverity sev) {
-  switch (sev) {
-    case LS_ERROR:
-      return ::logging::LOG_ERROR;
-    case LS_WARNING:
-      return ::logging::LOG_WARNING;
-    case LS_INFO:
-      return ::logging::LOG_INFO;
-    case LS_VERBOSE:
-    case LS_SENSITIVE:
-      return ::logging::LOG_VERBOSE;
-    default:
-      NOTREACHED();
-      return ::logging::LOG_FATAL;
-  }
-}
-
-inline int WebRtcVerbosityLevel(LoggingSeverity sev) {
-  switch (sev) {
-    case LS_ERROR:
-      return -2;
-    case LS_WARNING:
-      return -1;
-    case LS_INFO:  // We treat 'info' and 'verbose' as the same verbosity level.
-    case LS_VERBOSE:
-      return 1;
-    case LS_SENSITIVE:
-      return 2;
-    default:
-      NOTREACHED();
-      return 0;
-  }
-}
-
-// Logs extra information for LOG_E.
-static void LogExtra(std::ostringstream* print_stream,
-                     LogErrorContext err_ctx,
-                     int err,
-                     const char* module) {
-  if (err_ctx == ERRCTX_NONE)
-    return;
-
-  (*print_stream) << ": ";
-  (*print_stream) << "[0x" << std::setfill('0') << std::hex << std::setw(8)
-                  << err << "]";
-  switch (err_ctx) {
-    case ERRCTX_ERRNO:
-      (*print_stream) << " " << strerror(err);
-      break;
-#if defined(WEBRTC_WIN)
-    case ERRCTX_HRESULT: {
-      char msgbuf[256];
-      DWORD flags = FORMAT_MESSAGE_FROM_SYSTEM;
-      HMODULE hmod = GetModuleHandleA(module);
-      if (hmod)
-        flags |= FORMAT_MESSAGE_FROM_HMODULE;
-      if (DWORD len = FormatMessageA(
-              flags, hmod, err, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
-              msgbuf, sizeof(msgbuf) / sizeof(msgbuf[0]), NULL)) {
-        while ((len > 0) &&
-               isspace(static_cast<unsigned char>(msgbuf[len - 1]))) {
-          msgbuf[--len] = 0;
-        }
-        (*print_stream) << " " << msgbuf;
-      }
-      break;
-    }
-#elif defined(WEBRTC_IOS)
-    case ERRCTX_OSSTATUS:
-      (*print_stream) << " "
-                      << "Unknown LibJingle error: " << err;
-      break;
-#elif defined(WEBRTC_MAC)
-    case ERRCTX_OSSTATUS: {
-      (*print_stream) << " " << logging::DescriptionFromOSStatus(err);
-      break;
-    }
-#endif  // defined(WEBRTC_WIN)
-    default:
-      break;
-  }
-}
-
-DiagnosticLogMessage::DiagnosticLogMessage(const char* file,
-                                           int line,
-                                           LoggingSeverity severity,
-                                           LogErrorContext err_ctx,
-                                           int err)
-    : DiagnosticLogMessage(file, line, severity, err_ctx, err, nullptr) {}
-
-DiagnosticLogMessage::DiagnosticLogMessage(const char* file,
-                                           int line,
-                                           LoggingSeverity severity,
-                                           LogErrorContext err_ctx,
-                                           int err,
-                                           const char* module)
-    : file_name_(file),
-      line_(line),
-      severity_(severity),
-      err_ctx_(err_ctx),
-      err_(err),
-      module_(module),
-      log_to_chrome_(CheckVlogIsOnHelper(severity, file, strlen(file) + 1)) {}
-
-DiagnosticLogMessage::~DiagnosticLogMessage() {
-  const bool call_delegate =
-      g_logging_delegate_function && severity_ <= LS_INFO;
-
-  if (call_delegate || log_to_chrome_) {
-    LogExtra(&print_stream_, err_ctx_, err_, module_);
-    const std::string& str = print_stream_.str();
-    if (log_to_chrome_) {
-      LOG_LAZY_STREAM_DIRECT(file_name_, line_,
-                             rtc::WebRtcSevToChromeSev(severity_))
-          << str;
-    }
-
-    if (g_logging_delegate_function && severity_ <= LS_INFO) {
-      g_logging_delegate_function(str);
-    }
-  }
-}
-
-// static
-void LogMessage::LogToDebug(int min_sev) {
-  logging::SetMinLogLevel(min_sev);
-}
-
-void InitDiagnosticLoggingDelegateFunction(
-    void (*delegate)(const std::string&)) {
-#ifndef NDEBUG
-  // Ensure that this function is always called from the same thread.
-  base::subtle::NoBarrier_CompareAndSwap(
-      &g_init_logging_delegate_thread_id, 0,
-      static_cast<base::subtle::Atomic32>(base::PlatformThread::CurrentId()));
-  DCHECK_EQ(
-      g_init_logging_delegate_thread_id,
-      static_cast<base::subtle::Atomic32>(base::PlatformThread::CurrentId()));
-#endif
-  CHECK(delegate);
-  // This function may be called with the same argument several times if the
-  // page is reloaded or there are several PeerConnections on one page with
-  // logging enabled. This is OK, we simply don't have to do anything.
-  if (delegate == g_logging_delegate_function)
-    return;
-  CHECK(!g_logging_delegate_function);
-  g_logging_delegate_function = delegate;
-
-  if (g_extra_logging_init_function)
-    g_extra_logging_init_function(delegate);
-}
-
-void SetExtraLoggingInit(
-    void (*function)(void (*delegate)(const std::string&))) {
-  CHECK(function);
-  CHECK(!g_extra_logging_init_function);
-  g_extra_logging_init_function = function;
-}
-
-bool CheckVlogIsOnHelper(rtc::LoggingSeverity severity,
-                         const char* file,
-                         size_t N) {
-  return rtc::WebRtcVerbosityLevel(severity) <=
-         ::logging::GetVlogLevelHelper(file, N);
-}
-
-}  // namespace rtc
diff --git a/webrtc_overrides/rtc_base/logging.h b/webrtc_overrides/rtc_base/logging.h
deleted file mode 100644
index 85622bc05da..00000000000
--- a/webrtc_overrides/rtc_base/logging.h
+++ /dev/null
@@ -1,119 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// This file overrides the logging macros in WebRTC (webrtc/rtc_base/logging.h).
-// Instead of using WebRTC's logging implementation, the WebRTC macros are
-// mapped to DIAGNOSTIC_LOGING. In its implementation (DiagnosticLogMessage in
-// third_party/webrtc_overrides/rtc_base/logging.h), the corresponding
-// base/logging.h macros (e.g. Chromium's VLOG) are used.
-// If this file is included outside of WebRTC/libjingle it should be included
-// after base/logging.h (if any) or compiler error or unexpected behavior may
-// occur (macros that have the same name in WebRTC as in Chromium will use
-// the WebRTC definition if this file is included first).
-
-// Setting the LoggingSeverity (and lower) that should be written to file should
-// be done via command line by specifying the flags:
-// --vmodule or --v please see base/logging.h for details on how to use them.
-// Specifying what file to write to is done using InitLogging also in
-// base/logging.h.
-
-// The macros and classes declared in here are not described as they are
-// NOT TO BE USED outside of WebRTC/libjingle.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_LOGGING_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_LOGGING_H_
-
-#include "third_party/webrtc_overrides/rtc_base/diagnostic_logging.h"
-
-//////////////////////////////////////////////////////////////////////
-// WebRTC macros which in DiagnosticLogMessage are mapped over to
-// their VLOG equivalent in base/logging.h.
-//////////////////////////////////////////////////////////////////////
-
-#if defined(LOGGING_INSIDE_WEBRTC)
-
-#include <errno.h>
-
-namespace rtc {
-
-// Note that |N| is the size *with* the null terminator.
-bool CheckVlogIsOnHelper(LoggingSeverity severity, const char* file, size_t N);
-
-template <size_t N>
-bool CheckVlogIsOn(LoggingSeverity severity, const char (&file)[N]) {
-  return CheckVlogIsOnHelper(severity, file, N);
-}
-
-}  // namespace rtc
-
-#define DIAGNOSTIC_LOG(sev, ctx, err, ...)                                   \
-  rtc::DiagnosticLogMessage(__FILE__, __LINE__, sev, rtc::ERRCTX_##ctx, err, \
-                            ##__VA_ARGS__)                                   \
-      .stream()
-
-#define RTC_LOG_CHECK_LEVEL(sev) CheckVlogIsOn(rtc::sev, __FILE__)
-#define RTC_LOG_CHECK_LEVEL_V(sev) CheckVlogIsOn(sev, __FILE__)
-
-#define RTC_LOG_V(sev) DIAGNOSTIC_LOG(sev, NONE, 0)
-#undef RTC_LOG
-#define RTC_LOG(sev) DIAGNOSTIC_LOG(rtc::sev, NONE, 0)
-
-// The _F version prefixes the message with the current function name.
-#if defined(__GNUC__) && defined(_DEBUG)
-#define RTC_LOG_F(sev) RTC_LOG(sev) << __PRETTY_FUNCTION__ << ": "
-#else
-#define RTC_LOG_F(sev) RTC_LOG(sev) << __FUNCTION__ << ": "
-#endif
-
-#define RTC_LOG_E(sev, ctx, err, ...) \
-  DIAGNOSTIC_LOG(rtc::sev, ctx, err, ##__VA_ARGS__)
-
-#undef RTC_LOG_ERRNO_EX
-#define RTC_LOG_ERRNO_EX(sev, err) RTC_LOG_E(sev, ERRNO, err)
-#undef RTC_LOG_ERRNO
-#define RTC_LOG_ERRNO(sev) RTC_LOG_ERRNO_EX(sev, errno)
-
-#if defined(WEBRTC_WIN)
-#define RTC_LOG_GLE_EX(sev, err) RTC_LOG_E(sev, HRESULT, err)
-#define RTC_LOG_GLE(sev) RTC_LOG_GLE_EX(sev, GetLastError())
-#define RTC_LOG_GLEM(sev, mod) RTC_LOG_E(sev, HRESULT, GetLastError(), mod)
-#define RTC_LOG_ERR_EX(sev, err) RTC_LOG_GLE_EX(sev, err)
-#define RTC_LOG_ERR(sev) RTC_LOG_GLE(sev)
-#define RTC_LAST_SYSTEM_ERROR (::GetLastError())
-#else
-#define RTC_LOG_ERR_EX(sev, err) RTC_LOG_ERRNO_EX(sev, err)
-#define RTC_LOG_ERR(sev) RTC_LOG_ERRNO(sev)
-#define RTC_LAST_SYSTEM_ERROR (errno)
-#endif  // OS_WIN
-
-#undef RTC_PLOG
-#define RTC_PLOG(sev, err) RTC_LOG_ERR_EX(sev, err)
-
-// The RTC_DLOG macros are equivalent to their RTC_LOG counterparts except that
-// they only generate code in debug builds.
-#if defined(NDEBUG) && !defined(DCHECK_ALWAYS_ON)
-#define RTC_DLOG_IS_ON 0
-#else
-#define RTC_DLOG_IS_ON 1
-#endif
-
-#if RTC_DLOG_IS_ON
-#define RTC_DLOG(sev) RTC_LOG(sev)
-#define RTC_DLOG_V(sev) RTC_LOG_V(sev)
-#define RTC_DLOG_F(sev) RTC_LOG_F(sev)
-#else
-#define RTC_DLOG_EAT_STREAM_PARAMS(sev) \
-  (true ? true : ((void)(rtc::sev), true)) \
-      ? static_cast<void>(0)          \
-      : rtc::LogMessageVoidify() &    \
-        rtc::DiagnosticLogMessage(__FILE__, __LINE__, rtc::sev, \
-                                  rtc::ERRCTX_NONE, 0).stream()
-#define RTC_DLOG(sev) RTC_DLOG_EAT_STREAM_PARAMS(sev)
-#define RTC_DLOG_V(sev) RTC_DLOG_EAT_STREAM_PARAMS(sev)
-#define RTC_DLOG_F(sev) RTC_DLOG_EAT_STREAM_PARAMS(sev)
-#endif
-
-#endif  // LOGGING_INSIDE_WEBRTC
-
-#endif  // THIRD_PARTY_WEBRTC_OVERRIDES_WEBRTC_RTC_BASE_LOGGING_H_
diff --git a/webrtc_overrides/task_queue_factory.cc b/webrtc_overrides/task_queue_factory.cc
deleted file mode 100644
index f345c50934b..00000000000
--- a/webrtc_overrides/task_queue_factory.cc
+++ /dev/null
@@ -1,146 +0,0 @@
-// Copyright 2019 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "third_party/webrtc_overrides/task_queue_factory.h"
-
-#include "base/bind.h"
-#include "base/memory/ref_counted.h"
-#include "base/memory/scoped_refptr.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/task/post_task.h"
-#include "base/task/task_traits.h"
-#include "build/build_config.h"
-#include "third_party/webrtc/api/task_queue/task_queue_base.h"
-#include "third_party/webrtc/api/task_queue/task_queue_factory.h"
-
-namespace {
-
-class WebrtcTaskQueue final : public webrtc::TaskQueueBase {
- public:
-  explicit WebrtcTaskQueue(const base::TaskTraits& traits)
-      : task_runner_(base::CreateSequencedTaskRunner(traits)),
-        is_active_(new base::RefCountedData<bool>(true)) {
-    DCHECK(task_runner_);
-  }
-
-  void Delete() override;
-  void PostTask(std::unique_ptr<webrtc::QueuedTask> task) override;
-  void PostDelayedTask(std::unique_ptr<webrtc::QueuedTask> task,
-                       uint32_t milliseconds) override;
-
- private:
-  ~WebrtcTaskQueue() override = default;
-
-  static void RunTask(WebrtcTaskQueue* task_queue,
-                      scoped_refptr<base::RefCountedData<bool>> is_active,
-                      std::unique_ptr<webrtc::QueuedTask> task);
-
-  const scoped_refptr<base::SequencedTaskRunner> task_runner_;
-  // Value of |is_active_| is checked and set on |task_runner_|.
-  const scoped_refptr<base::RefCountedData<bool>> is_active_;
-};
-
-void Deactivate(scoped_refptr<base::RefCountedData<bool>> is_active,
-                base::WaitableEvent* event) {
-  is_active->data = false;
-  event->Signal();
-}
-
-void WebrtcTaskQueue::Delete() {
-  DCHECK(!IsCurrent());
-  base::WaitableEvent event(base::WaitableEvent::ResetPolicy::MANUAL,
-                            base::WaitableEvent::InitialState::NOT_SIGNALED);
-  task_runner_->PostTask(FROM_HERE,
-                         base::BindOnce(&Deactivate, is_active_, &event));
-  event.Wait();
-  delete this;
-}
-
-void WebrtcTaskQueue::RunTask(
-    WebrtcTaskQueue* task_queue,
-    scoped_refptr<base::RefCountedData<bool>> is_active,
-    std::unique_ptr<webrtc::QueuedTask> task) {
-  if (!is_active->data)
-    return;
-
-  CurrentTaskQueueSetter set_current(task_queue);
-  webrtc::QueuedTask* task_ptr = task.release();
-  if (task_ptr->Run()) {
-    // Delete task_ptr before CurrentTaskQueueSetter clears state that this code
-    // is running on the task queue.
-    delete task_ptr;
-  }
-}
-
-void WebrtcTaskQueue::PostTask(std::unique_ptr<webrtc::QueuedTask> task) {
-  // Posted Task might outlive this, but access to this is guarded by
-  // ref-counted |is_active_| flag.
-  task_runner_->PostTask(
-      FROM_HERE,
-      base::BindOnce(&WebrtcTaskQueue::RunTask, base::Unretained(this),
-                     is_active_, std::move(task)));
-}
-
-void WebrtcTaskQueue::PostDelayedTask(std::unique_ptr<webrtc::QueuedTask> task,
-                                      uint32_t milliseconds) {
-  // Posted Task might outlive this, but access to this is guarded by
-  // ref-counted |is_active_| flag.
-  task_runner_->PostDelayedTask(
-      FROM_HERE,
-      base::BindOnce(&WebrtcTaskQueue::RunTask, base::Unretained(this),
-                     is_active_, std::move(task)),
-      base::TimeDelta::FromMilliseconds(milliseconds));
-}
-
-base::TaskTraits TaskQueuePriority2Traits(
-    webrtc::TaskQueueFactory::Priority priority) {
-  // The content/renderer/media/webrtc/rtc_video_encoder.* code
-  // employs a PostTask/Wait pattern that uses TQ in a way that makes it
-  // blocking and synchronous, which is why we allow WithBaseSyncPrimitives()
-  // for OS_ANDROID.
-  switch (priority) {
-    case webrtc::TaskQueueFactory::Priority::HIGH:
-#if defined(OS_ANDROID)
-      return {base::ThreadPool(), base::WithBaseSyncPrimitives(),
-              base::TaskPriority::HIGHEST};
-#else
-      return {base::ThreadPool(), base::TaskPriority::HIGHEST};
-#endif
-      break;
-    case webrtc::TaskQueueFactory::Priority::LOW:
-      return {base::ThreadPool(), base::MayBlock(),
-              base::TaskPriority::BEST_EFFORT};
-    case webrtc::TaskQueueFactory::Priority::NORMAL:
-    default:
-#if defined(OS_ANDROID)
-      return {base::ThreadPool(), base::WithBaseSyncPrimitives()};
-#else
-      return {base::ThreadPool()};
-#endif
-  }
-}
-
-class WebrtcTaskQueueFactory final : public webrtc::TaskQueueFactory {
- public:
-  WebrtcTaskQueueFactory() = default;
-
-  std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter>
-  CreateTaskQueue(absl::string_view /*name*/,
-                  Priority priority) const override {
-    return std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter>(
-        new WebrtcTaskQueue(TaskQueuePriority2Traits(priority)));
-  }
-};
-
-}  // namespace
-
-std::unique_ptr<webrtc::TaskQueueFactory> CreateWebRtcTaskQueueFactory() {
-  return std::make_unique<WebrtcTaskQueueFactory>();
-}
-
-std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter>
-CreateWebRtcTaskQueue(webrtc::TaskQueueFactory::Priority priority) {
-  return std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter>(
-      new WebrtcTaskQueue(TaskQueuePriority2Traits(priority)));
-}
diff --git a/webrtc_overrides/task_queue_factory.h b/webrtc_overrides/task_queue_factory.h
deleted file mode 100644
index 20130868ef9..00000000000
--- a/webrtc_overrides/task_queue_factory.h
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright 2019 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef THIRD_PARTY_WEBRTC_OVERRIDES_TASK_QUEUE_FACTORY_H_
-#define THIRD_PARTY_WEBRTC_OVERRIDES_TASK_QUEUE_FACTORY_H_
-
-#include <memory>
-
-#include "base/task/task_traits.h"
-#include "third_party/webrtc/api/task_queue/task_queue_base.h"
-#include "third_party/webrtc/api/task_queue/task_queue_factory.h"
-
-// Creates factory for webrtc::TaskQueueBase backed by base::SequencedTaskRunner
-// Tested by /content/renderer/media/webrtc/task_queue_factory_unittest.cc
-std::unique_ptr<webrtc::TaskQueueFactory> CreateWebRtcTaskQueueFactory();
-
-std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter>
-CreateWebRtcTaskQueue(webrtc::TaskQueueFactory::Priority priority);
-
-#endif  // THIRD_PARTY_WEBRTC_OVERRIDES_TASK_QUEUE_FACTORY_H_
-- 
2.21.0.windows.1

