# Copyright (C) <2018> Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/webrtc.gni")
import("//testing/test.gni")

# Introduced for using libvpx config files. We only enable libvpx rate
# controller for VP9 on Windows.
if (is_win) {
  os_category = current_os

  if (current_cpu == "x86") {
    cpu_arch_full = "ia32"
  } else if (current_cpu == "x64") {
    cpu_arch_full = "x64"
  } else if (current_cpu == "arm") {
    if (arm_use_neon) {
      cpu_arch_full = "arm-neon"
    } else if (is_android) {
      cpu_arch_full = "arm-neon-cpu-detect"
    } else {
      cpu_arch_full = "arm"
    }
  }
}

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}
if (is_ios) {
  import("//build/config/ios/rules.gni")
}
declare_args() {
  include_internal_audio_device = true
  owt_msdk_lib_root = ""
  owt_msdk_header_root = ""
}
if (is_ios || is_mac) {
  config("owt_sdk_objc_warnings_config") {
    cflags_objc = [ "-Wstrict-prototypes" ]
  }
}
if (is_android) {
  config("libjingle_peerconnection_jni_warnings_config") {
    # The warnings below are enabled by default. Since GN orders compiler flags
    # for a target before flags from configs, the only way to disable such
    # warnings is by having them in a separate config, loaded from the target.
    if (!is_win) {
      cflags = [
        "-Wno-sign-compare",
        "-Wno-unused-variable",
      ]
    }
  }
}
static_library("owt_deps") {
  deps = [
    "//third_party/webrtc/api:create_peerconnection_factory",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]

  if (is_android) {
    deps += [
      "//third_party/webrtc/modules/utility",
      "//third_party/webrtc/sdk/android:libjingle_peerconnection_jni",
    ]
  }
  complete_static_lib = true
}
if (!is_ios) {
  static_library("owt") {
    deps = [
      ":owt_sdk_base",
      ":owt_sdk_conf",
      ":owt_sdk_p2p",
      "//third_party/protobuf:protobuf_lite",
      "//third_party/webrtc",
      "//third_party/webrtc:webrtc",
      "//third_party/webrtc/api:libjingle_peerconnection_api",
    ]
    complete_static_lib = true
  }
}
static_library("owt_sdk_base") {
  sources = [
    "sdk/base/cameravideocapturer.cc",
    "sdk/base/cameravideocapturer.h",
    "sdk/base/codecutils.cc",
    "sdk/base/codecutils.h",
    "sdk/base/connectionstats.cc",
    "sdk/base/deviceutils.cc",
    "sdk/base/eventtrigger.h",
    "sdk/base/exception.cc",
    "sdk/base/functionalobserver.cc",
    "sdk/base/functionalobserver.h",
    "sdk/base/globalconfiguration.cc",
    "sdk/base/localcamerastreamparameters.cc",
    "sdk/base/logging.cc",
    "sdk/base/logsinks.cc",
    "sdk/base/logsinks.h",
    "sdk/base/mediautils.cc",
    "sdk/base/mediautils.h",
    "sdk/base/peerconnectionchannel.cc",
    "sdk/base/peerconnectionchannel.h",
    "sdk/base/peerconnectiondependencyfactory.cc",
    "sdk/base/peerconnectiondependencyfactory.h",
    "sdk/base/sdputils.cc",
    "sdk/base/sdputils.h",
    "sdk/base/stream.cc",
    "sdk/base/stringutils.cc",
    "sdk/base/stringutils.h",
    "sdk/base/sysinfo.cc",
    "sdk/base/sysinfo.h",
    "sdk/base/vcmcapturer.cc",
    "sdk/base/vcmcapturer.h",
    "sdk/base/webrtcaudiorendererimpl.cc",
    "sdk/base/webrtcaudiorendererimpl.h",
    "sdk/include/cpp/owt/base/audioplayerinterface.h",
    "sdk/include/cpp/owt/base/clientconfiguration.h",
    "sdk/include/cpp/owt/base/connectionstats.h",
    "sdk/include/cpp/owt/base/deviceutils.h",
    "sdk/include/cpp/owt/base/exception.h",
    "sdk/include/cpp/owt/base/framegeneratorinterface.h",
    "sdk/include/cpp/owt/base/localcamerastreamparameters.h",
    "sdk/include/cpp/owt/base/logging.h",
    "sdk/include/cpp/owt/base/stream.h",
    "sdk/include/cpp/owt/base/videorendererinterface.h",
  ]
  if (is_win || is_linux) {
    sources += [
      "sdk/base/customizedframescapturer.cc",
      "sdk/base/customizedframescapturer.h",
      "sdk/base/customizedvideoencoderproxy.cc",
      "sdk/base/customizedvideoencoderproxy.h",
      "sdk/base/customizedvideosource.cc",
      "sdk/base/customizedvideosource.h",
      "sdk/base/encodedvideoencoderfactory.cc",
      "sdk/base/encodedvideoencoderfactory.h",
      "sdk/base/webrtcvideorendererimpl.cc",
      "sdk/base/webrtcvideorendererimpl.h",
      "sdk/include/cpp/owt/base/videodecoderinterface.h",
    ]
  }
  public_deps = [
    "//third_party/libyuv:libyuv",
    "//third_party/webrtc/api:create_peerconnection_factory",
    "//third_party/webrtc/api:libjingle_peerconnection_api",
    "//third_party/webrtc/api/audio_codecs:builtin_audio_decoder_factory",
    "//third_party/webrtc/api/audio_codecs:builtin_audio_encoder_factory",
    "//third_party/webrtc/api/task_queue:default_task_queue_factory",
    "//third_party/webrtc/api/video:video_frame",
    "//third_party/webrtc/api/video_codecs:builtin_video_decoder_factory",
    "//third_party/webrtc/api/video_codecs:builtin_video_encoder_factory",
    "//third_party/webrtc/media:rtc_audio_video",
    "//third_party/webrtc/media:rtc_media_base",
    "//third_party/webrtc/modules/audio_device",
    "//third_party/webrtc/modules/audio_processing",
    "//third_party/webrtc/modules/audio_processing:api",
    "//third_party/webrtc/modules/desktop_capture:desktop_capture",
    "//third_party/webrtc/modules/video_capture:video_capture_module",
    "//third_party/webrtc/pc:libjingle_peerconnection",
    "//third_party/webrtc/rtc_base:rtc_base",
    "//third_party/webrtc/rtc_base:rtc_base_approved",
    "//third_party/webrtc/rtc_base:rtc_json",
    "//third_party/webrtc/system_wrappers:field_trial",
    "//third_party/webrtc/system_wrappers:metrics",
    "//third_party/webrtc/system_wrappers:system_wrappers",
  ]
  deps = [ "//base:logging_buildflags" ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]

  defines = [ "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE" ]
  defines += [ "USE_BUILTIN_SW_CODECS" ]
  
  if (owt_msdk_header_root != "") {
    include_dirs += [ owt_msdk_header_root ]
    defines += [ "OWT_USE_MSDK" ]
  }
  if (!rtc_use_h265) {
    defines += [ "DISABLE_H265" ]
  } else {
    defines += [ "OWT_USE_H265" ]
  }
  if (is_win || is_linux) {
    # Custom audio/video input and output.
    # When rebasing libwebrtc to a new version, custom audio/video input/output
    # usually need some changes to fit the latest API.
    defines += [ "OWT_CUSTOM_AVIO" ]
  }
  if (is_ios) {
    sources += [
      "sdk/base/ios/networkmonitorios.cc",
      "sdk/base/ios/networkmonitorios.h",
    ]
    public_deps += [ "//third_party/webrtc/sdk:framework_objc+link" ]
  }
  if (is_win) {
    sources += [
      "sdk/base/desktopcapturer.cc",
      "sdk/base/desktopcapturer.h",
      "sdk/base/win/base_allocator.cc",
      "sdk/base/win/base_allocator.h",
      "sdk/base/win/d3d_allocator.cc",
      "sdk/base/win/d3d_allocator.h",
      "sdk/base/win/d3d11_allocator.cc",
      "sdk/base/win/d3d11_allocator.h",
      "sdk/base/win/d3dnativeframe.h",
      "sdk/base/win/mediacapabilities.cc",
      "sdk/base/win/mediacapabilities.h",
      "sdk/base/win/msdkvideobase.cc",
      "sdk/base/win/msdkvideobase.h",
      "sdk/base/win/msdkvideodecoder.cc",
      "sdk/base/win/msdkvideodecoder.h",
      "sdk/base/win/msdkvideodecoderfactory.cc",
      "sdk/base/win/msdkvideodecoderfactory.h",
      "sdk/base/win/msdkvideoencoder.cc",
      "sdk/base/win/msdkvideoencoder.h",
      "sdk/base/win/msdkvideoencoderfactory.cc",
      "sdk/base/win/msdkvideoencoderfactory.h",
      "sdk/base/win/sysmem_allocator.cc",
      "sdk/base/win/sysmem_allocator.h",
      "sdk/base/win/videorendererwin.cc",
      "sdk/base/win/videorendererwin.h",
      "sdk/base/win/videorendererd3d11.cc",
      "sdk/base/win/videorendererd3d11.h",
      "sdk/base/win/vp9ratecontrol.cc",
      "sdk/base/win/vp9ratecontrol.h",
      "sdk/base/win/vp9temporallayers.cc",
      "sdk/base/win/vp9temporallayers.h",
      "sdk/base/windowcapturer.cc",
    ]
    public_deps += [ "//third_party/webrtc/modules/audio_device:audio_device_module_from_input_and_output" ]
    public_deps += [ "//third_party/libvpx" ]
    include_dirs += [
      "//third_party/libvpx/source/config",
      "//third_party/libvpx/source/config/$os_category/$cpu_arch_full",
      "//third_party/libvpx/source/libvpx",
    ]
  }

  if (!is_ios) {
    sources += [
      "sdk/base/customizedvideodecoderfactory.cc",
      "sdk/base/customizedvideodecoderfactory.h",
      "sdk/base/customizedvideodecoderproxy.cc",
      "sdk/base/customizedvideodecoderproxy.h",
    ]
  }
  if ((is_win || is_linux) && include_internal_audio_device) {
    sources += [
      "sdk/base/customizedaudiocapturer.cc",
      "sdk/base/customizedaudiocapturer.h",
      "sdk/base/customizedaudiodevicemodule.cc",
      "sdk/base/customizedaudiodevicemodule.h",
    ]
  }
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
  if (is_win && is_clang) {
    cflags = [
      "-Wno-microsoft-extra-qualification",
      "-Wno-reorder",
    ]
  }
}
static_library("owt_sdk_p2p") {
  deps = [
    ":owt_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
  ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]
  sources = [
    "sdk/include/cpp/owt/p2p/p2pclient.h",
    "sdk/include/cpp/owt/p2p/p2ppublication.h",
    "sdk/include/cpp/owt/p2p/p2psignalingchannelinterface.h",
    "sdk/include/cpp/owt/p2p/p2psignalingreceiverinterface.h",
    "sdk/include/cpp/owt/p2p/p2psignalingsenderinterface.h",
    "sdk/p2p/p2pclient.cc",
    "sdk/p2p/p2ppeerconnectionchannel.cc",
    "sdk/p2p/p2ppeerconnectionchannel.h",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.cc",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.h",
    "sdk/p2p/p2ppublication.cc",
    "sdk/p2p/p2psignalingsenderimpl.cc",
    "sdk/p2p/p2psignalingsenderimpl.h",
  ]
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
static_library("owt_sdk_conf") {
  deps = [
    ":owt_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]
  sources = [
    "sdk/conference/conferenceclient.cc",
    "sdk/conference/conferencepeerconnectionchannel.cc",
    "sdk/conference/conferencepeerconnectionchannel.h",
    "sdk/conference/conferencepublication.cc",
    "sdk/conference/conferencesocketsignalingchannel.cc",
    "sdk/conference/conferencesocketsignalingchannel.h",
    "sdk/conference/conferencesubscription.cc",
    "sdk/conference/remotemixedstream.cc",
    "sdk/include/cpp/owt/conference/conferenceclient.h",
    "sdk/include/cpp/owt/conference/externaloutput.h",
    "sdk/include/cpp/owt/conference/remotemixedstream.h",
    "sdk/include/cpp/owt/conference/user.h",
  ]
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
if (is_ios) {
  static_library("owt_sdk_objc") {
    deps = [
      ":owt_sdk_base",
      ":owt_sdk_conf",
      ":owt_sdk_p2p",
      "//third_party/jsoncpp",
    ]
    include_dirs = [
      "//third_party",
      "//third_party/webrtc/sdk/objc/Framework/Headers",
      "sdk/include/cpp",
      "sdk/include/objc",
    ]
    configs += [
      "//build/config/compiler:enable_arc",
      ":owt_sdk_objc_warnings_config",
    ]
    sources = [
      "sdk/base/objc/CameraVideoCapturer.h",
      "sdk/base/objc/CameraVideoCapturer.mm",
      "sdk/base/objc/FrameGeneratorObjcImpl.h",
      "sdk/base/objc/FrameGeneratorObjcImpl.mm",
      "sdk/base/objc/OWTClientConfiguration.mm",
      "sdk/base/objc/OWTDefaultVideoDecoderFactory.h",
      "sdk/base/objc/OWTDefaultVideoDecoderFactory.m",
      "sdk/base/objc/OWTDefaultVideoEncoderFactory.h",
      "sdk/base/objc/OWTDefaultVideoEncoderFactory.m",
      "sdk/base/objc/OWTErrors.m",

      #"sdk/base/objc/OWTGlobalConfiguration.mm",
      "sdk/base/objc/OWTLocalStream+Private.h",
      "sdk/base/objc/OWTLocalStream.mm",
      "sdk/base/objc/OWTMediaFormat+Internal.h",
      "sdk/base/objc/OWTMediaFormat.mm",
      "sdk/base/objc/OWTPeerConnectionDependencyFactory.h",
      "sdk/base/objc/OWTPeerConnectionDependencyFactory.mm",
      "sdk/base/objc/OWTPublishOptions.mm",
      "sdk/base/objc/OWTRemoteStream.mm",
      "sdk/base/objc/OWTStream+Internal.h",
      "sdk/base/objc/OWTStream.mm",
      "sdk/base/objc/ObjcVideoCapturerInterface.h",
      "sdk/base/objc/ObjcVideoCodecFactory.h",
      "sdk/base/objc/ObjcVideoCodecFactory.mm",
      "sdk/base/objc/RTCPeerConnectionFactory+OWT.h",
      "sdk/base/objc/RTCPeerConnectionFactory+OWT.mm",
      "sdk/base/objc/RemoteStreamObserverObjcImpl.mm",
      "sdk/base/objc/public/OWTErrors.h",
      "sdk/base/objc/public/OWTFrameGeneratorProtocol.h",

      #"sdk/base/objc/public/OWTGlobalConfiguration.h",
      "sdk/base/objc/public/OWTLocalCameraStream.h",
      "sdk/base/objc/public/OWTLocalCameraStreamParameters.h",
      "sdk/base/objc/public/OWTLocalCustomizedStream.h",
      "sdk/base/objc/public/OWTLocalCustomizedStreamParameters.h",
      "sdk/base/objc/public/OWTLocalStream.h",
      "sdk/base/objc/public/OWTMediaCodec.h",
      "sdk/base/objc/public/OWTMediaFormat.h",
      "sdk/base/objc/public/OWTRemoteCameraStream.h",
      "sdk/base/objc/public/OWTRemoteScreenStream.h",
      "sdk/base/objc/public/OWTRemoteStream.h",
      "sdk/base/objc/public/OWTStream.h",
      "sdk/base/sysinfoios.mm",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.h",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.mm",
      "sdk/conference/objc/ConferencePublicationObserverObjcImpl.mm",
      "sdk/conference/objc/ConferenceSubscriptionObserverObjcImpl.mm",
      "sdk/conference/objc/OWTConferenceClient.mm",
      "sdk/conference/objc/OWTConferenceClientConfiguration.mm",
      "sdk/conference/objc/OWTConferenceInfo.mm",
      "sdk/conference/objc/OWTConferenceParticipant+Private.h",
      "sdk/conference/objc/OWTConferenceParticipant.mm",
      "sdk/conference/objc/OWTConferencePublication.mm",
      "sdk/conference/objc/OWTConferenceSubscription+Private.h",
      "sdk/conference/objc/OWTConferenceSubscription.mm",
      "sdk/conference/objc/OWTRemoteMixedStream.mm",
      "sdk/conference/objc/ParticipantObserverObjcImpl.h",
      "sdk/conference/objc/ParticipantObserverObjcImpl.mm",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.h",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.mm",
      "sdk/conference/objc/public/OWTConferenceClient.h",
      "sdk/conference/objc/public/OWTConferenceClientConfiguration.h",
      "sdk/conference/objc/public/OWTConferenceClientObserver.h",
      "sdk/conference/objc/public/OWTConferenceErrors.h",
      "sdk/conference/objc/public/OWTConferenceParticipant.h",
      "sdk/conference/objc/public/OWTConferenceSubscription.h",
      "sdk/conference/objc/public/OWTRemoteMixedStream.h",
      "sdk/conference/objc/public/OWTRemoteMixedStreamObserver.h",
      "sdk/p2p/objc/OWTP2PClient.m",
      "sdk/p2p/objc/OWTP2PClientConfiguration.m",
      "sdk/p2p/objc/OWTP2PPeerConnectionChannel.h",
      "sdk/p2p/objc/OWTP2PPeerConnectionChannel.mm",
      "sdk/p2p/objc/OWTP2PPublication.m",
      "sdk/p2p/objc/OWTP2PSignalingSenderObjcImpl.h",
      "sdk/p2p/objc/OWTP2PSignalingSenderObjcImpl.mm",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.h",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.mm",
      "sdk/p2p/objc/public/OWTP2PClient.h",
      "sdk/p2p/objc/public/OWTP2PClientConfiguration.h",
      "sdk/p2p/objc/public/OWTP2PErrors.h",
      "sdk/p2p/objc/public/OWTP2PPeerConnectionChannelObserver.h",
      "sdk/p2p/objc/public/OWTP2PSignalingChannelProtocol.h",
      "sdk/p2p/objc/public/OWTP2PSignalingReceiverProtocol.h",
      "sdk/p2p/objc/public/OWTP2PSignalingSenderProtocol.h",
    ]
  }
}
if (owt_include_tests) {
  group("owt_tests") {
    testonly = true

    # Only the root target should depend on this.
    visibility = [ "//:default" ]
    deps = [ ":owt_unittests" ]
  }
  test("owt_unittests") {
    testonly = true
    sources = [
      "sdk/base/mediautils_unittest.cc",
      "sdk/test/unittest_main.cc",
    ]
    deps = [
      ":owt_sdk_base",
      "//testing/gmock",
      "//testing/gtest",
    ]
    libs = []
    if (is_win) {
      libs += [
        "amstrmid.lib",
        "d3d9.lib",
        "d3d11.lib",
        "dxgi.lib",
        "dmoguids.lib",
        "dxva2.lib",
        "mf.lib",
        "mfplat.lib",
        "mfuuid.lib",
        "msdmo.lib",
        "strmiids.lib",
        "user32.lib",
        "wmcodecdspuuid.lib",
        "ws2_32.lib",
      ]
      if (owt_msdk_lib_root != "") {
        libs += [ "libmfx_vs2015.lib" ]
        lib_dirs = [ owt_msdk_lib_root ]
      }
      ldflags = [
        "/ignore:4098",
        "/ignore:4099",
      ]
    }
  }
}
