#
# Intel License
#
import("//build_overrides/webrtc.gni")
import("//testing/test.gni")
if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}
if (is_ios) {
  import("//build/config/ios/rules.gni")
}
declare_args() {
  include_internal_audio_device = true
  woogeen_msdk_lib_root = ""
  woogeen_msdk_header_root = ""

  # Disable some features while rebasing to M63. It should be removed once rebasing is finished.
  oms_rebase_m63 = true
}
if (is_ios || is_mac) {
  config("woogeen_sdk_objc_warnings_config") {
    # Bug 1375. Fix -Wobjc-missing-property-synthesis warnings.
    cflags_objc = [ "-Wno-objc-missing-property-synthesis" ]
    cflags_objcc = [ "-Wno-objc-missing-property-synthesis" ]
  }
}
if (is_android) {
  config("libjingle_peerconnection_jni_warnings_config") {
    # The warnings below are enabled by default. Since GN orders compiler flags
    # for a target before flags from configs, the only way to disable such
    # warnings is by having them in a separate config, loaded from the target.
    if (!is_win) {
      cflags = [
        "-Wno-sign-compare",
        "-Wno-unused-variable",
      ]
    }
  }
}
static_library("oms_deps") {
  deps = [
    "//third_party/jsoncpp",
    "//third_party/libyuv:libyuv",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]
  complete_static_lib = true
}
if (!is_ios) {
  static_library("oms") {
    deps = [
      ":oms_sdk_base",
      ":oms_sdk_conf",
      ":oms_sdk_p2p",
      "//third_party/protobuf:protobuf_lite",
      "//third_party/webrtc",
      "//third_party/webrtc:webrtc",
      "//third_party/webrtc/api:libjingle_peerconnection_api",
    ]
    complete_static_lib = true
  }
}
static_library("oms_sdk_base") {
  sources = [
    "sdk/base/customizedframescapturer.cc",
    "sdk/base/customizedframescapturer.h",
    "sdk/base/customizedvideoencoderproxy.cc",
    "sdk/base/customizedvideoencoderproxy.h",
    "sdk/base/deviceutils.cc",
    "sdk/base/encodedvideoencoderfactory.cc",
    "sdk/base/encodedvideoencoderfactory.h",
    "sdk/base/eventtrigger.h",
    "sdk/base/exception.cc",
    "sdk/base/functionalobserver.cc",
    "sdk/base/functionalobserver.h",
    "sdk/base/globalconfiguration.cc",
    "sdk/base/localcamerastreamparameters.cc",
    "sdk/base/logging.cc",
    "sdk/base/logsinks.cc",
    "sdk/base/logsinks.h",
    "sdk/base/mediaconstraintsimpl.h",
    "sdk/base/mediautils.cc",
    "sdk/base/mediautils.h",
    "sdk/base/peerconnectionchannel.cc",
    "sdk/base/peerconnectionchannel.h",
    "sdk/base/peerconnectiondependencyfactory.cc",
    "sdk/base/peerconnectiondependencyfactory.h",
    "sdk/base/sdputils.cc",
    "sdk/base/sdputils.h",
    "sdk/base/stream.cc",
    "sdk/base/stringutils.cc",
    "sdk/base/stringutils.h",
    "sdk/base/sysinfo.cc",
    "sdk/base/sysinfo.h",
    "sdk/base/webrtcvideorendererimpl.cc",
    "sdk/base/webrtcvideorendererimpl.h",
    "sdk/include/cpp/oms/base/clientconfiguration.h",
    "sdk/include/cpp/oms/base/connectionstats.h",
    "sdk/include/cpp/oms/base/deviceutils.h",
    "sdk/include/cpp/oms/base/exception.h",
    "sdk/include/cpp/oms/base/framegeneratorinterface.h",
    "sdk/include/cpp/oms/base/localcamerastreamparameters.h",
    "sdk/include/cpp/oms/base/logging.h",
    "sdk/include/cpp/oms/base/stream.h",
    "sdk/include/cpp/oms/base/videodecoderinterface.h",
    "sdk/include/cpp/oms/base/videorendererinterface.h",
  ]
  public_deps = [
    "//third_party/libyuv:libyuv",
    "//third_party/webrtc/api:libjingle_peerconnection_api",
    "//third_party/webrtc/api/video:video_frame",
    "//third_party/webrtc/api/video_codecs:builtin_video_decoder_factory",
    "//third_party/webrtc/api/video_codecs:builtin_video_encoder_factory",
    "//third_party/webrtc/api/audio_codecs:builtin_audio_decoder_factory",
    "//third_party/webrtc/api/audio_codecs:builtin_audio_encoder_factory",
    "//third_party/webrtc/media:rtc_audio_video",
    "//third_party/webrtc/media:rtc_media_base",
    "//third_party/webrtc/modules/desktop_capture:desktop_capture",
    "//third_party/webrtc/modules/video_capture:video_capture_module",
    "//third_party/webrtc/pc:libjingle_peerconnection",
    "//third_party/webrtc/rtc_base:rtc_base",
    "//third_party/webrtc/rtc_base:rtc_base_approved",
    "//third_party/webrtc/rtc_base:rtc_json",
    "//third_party/webrtc/system_wrappers:field_trial_default",
    "//third_party/webrtc/system_wrappers:metrics_default",
    "//third_party/webrtc/system_wrappers:runtime_enabled_features_default",
    "//third_party/webrtc/system_wrappers:system_wrappers_default",
  ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]

  if (woogeen_msdk_header_root != "") {
    include_dirs += [ woogeen_msdk_header_root ]
  }

  defines = [ "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE" ]
  defines += [ "USE_BUILTIN_SW_CODECS" ]
  if (is_ios) {
    sources += [
      "sdk/base/ios/networkmonitorios.cc",
      "sdk/base/ios/networkmonitorios.h",
    ]
    deps = [
      "//third_party/webrtc/sdk:framework_objc+link",
    ]
  }
  if (is_win) {
    sources += [
      "sdk/base/desktopcapturer.cc",
      "sdk/base/desktopcapturer.h",
      "sdk/base/win/d3dnativeframe.h",
      "sdk/base/win/msdkvideodecoder.cc",
      "sdk/base/win/msdkvideodecoder.h",
      "sdk/base/win/msdkvideoencoder.cc",
      "sdk/base/win/msdkvideoencoder.h",
      "sdk/base/win/msdkvideodecoderfactory.cc",
      "sdk/base/win/msdkvideodecoderfactory.h",
      "sdk/base/win/msdkvideoencoderfactory.cc",
      "sdk/base/win/msdkvideoencoderfactory.h",
      "sdk/base/win/base_allocator.cc",
      "sdk/base/win/base_allocator.h",
      "sdk/base/win/d3d_allocator.cc",
      "sdk/base/win/d3d_allocator.h",
      "sdk/base/win/sysmem_allocator.h",
      "sdk/base/win/sysmem_allocator.cc",
      "sdk/base/win/msdkvideobase.cc",
      "sdk/base/win/msdkvideobase.h",
      "sdk/base/win/videorendererwin.cc",
      "sdk/base/win/videorendererwin.h",
      "sdk/base/windowcapturer.cc",
      "sdk/base/windowcapturer.h",
    ]
  }

  if (!is_ios) {
    sources += [
      "sdk/base/customizedvideodecoderfactory.cc",
      "sdk/base/customizedvideodecoderfactory.h",
      "sdk/base/customizedvideodecoderproxy.cc",
      "sdk/base/customizedvideodecoderproxy.h",
    ]
  }
  if (include_internal_audio_device) {
    sources += [
      "sdk/base/customizedaudiocapturer.cc",
      "sdk/base/customizedaudiocapturer.h",
      "sdk/base/customizedaudiodevicemodule.cc",
      "sdk/base/customizedaudiodevicemodule.h",
    ]
  }
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
  if (is_win && is_clang) {
    cflags = [
      "-Wno-microsoft-extra-qualification",
      "-Wno-reorder",
    ]
  }
  if (!oms_rebase_m63) {
    defines += [ "OMS_REBASE_M63" ]
  }
}
static_library("oms_sdk_p2p") {
  deps = [
    ":oms_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
  ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]
  sources = [
    "sdk/include/cpp/oms/p2p/p2pclient.h",
    "sdk/include/cpp/oms/p2p/p2ppublication.h",
    "sdk/include/cpp/oms/p2p/p2psignalingchannelinterface.h",
    "sdk/include/cpp/oms/p2p/p2psignalingreceiverinterface.h",
    "sdk/include/cpp/oms/p2p/p2psignalingsenderinterface.h",
    "sdk/p2p/p2pclient.cc",
    "sdk/p2p/p2ppeerconnectionchannel.cc",
    "sdk/p2p/p2ppeerconnectionchannel.h",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.cc",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.h",
    "sdk/p2p/p2psignalingsenderimpl.cc",
    "sdk/p2p/p2psignalingsenderimpl.h",
    "sdk/p2p/p2ppublication.cc",
  ]
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
static_library("oms_sdk_conf") {
  deps = [
    ":oms_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]
  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]
  sources = [
    "sdk/conference/conferenceclient.cc",
    "sdk/conference/conferencepeerconnectionchannel.cc",
    "sdk/conference/conferencepeerconnectionchannel.h",
    "sdk/conference/conferencepublication.cc",
    "sdk/conference/conferencesocketsignalingchannel.cc",
    "sdk/conference/conferencesocketsignalingchannel.h",
    "sdk/conference/conferencesubscription.cc",
    "sdk/conference/remotemixedstream.cc",
    "sdk/include/cpp/oms/conference/conferenceclient.h",
    "sdk/include/cpp/oms/conference/externaloutput.h",
    "sdk/include/cpp/oms/conference/remotemixedstream.h",
    "sdk/include/cpp/oms/conference/user.h",
  ]
  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
if (is_ios) {
  static_library("oms_sdk_objc") {
    deps = [
      ":oms_sdk_base",
      ":oms_sdk_conf",
      ":oms_sdk_p2p",
      "//third_party/jsoncpp",
      "//third_party/webrtc/system_wrappers:system_wrappers_default",
    ]
    include_dirs = [
      "//third_party",
      "//third_party/webrtc/sdk/objc/Framework/Headers",
      "sdk/include/cpp",
      "sdk/include/objc",
    ]
    configs += [
      "//build/config/compiler:enable_arc",
      ":woogeen_sdk_objc_warnings_config",
    ]
    sources = [
      "sdk/base/objc/CameraVideoCapturer.h",
      "sdk/base/objc/CameraVideoCapturer.mm",
      "sdk/base/objc/FrameGeneratorObjcImpl.h",
      "sdk/base/objc/FrameGeneratorObjcImpl.mm",
      "sdk/base/objc/OMSClientConfiguration.mm",
      "sdk/base/objc/OMSDefaultVideoDecoderFactory.h",
      "sdk/base/objc/OMSDefaultVideoDecoderFactory.m",
      "sdk/base/objc/OMSDefaultVideoEncoderFactory.h",
      "sdk/base/objc/OMSDefaultVideoEncoderFactory.m",
      "sdk/base/objc/OMSErrors.m",
      "sdk/base/objc/OMSGlobalConfiguration.mm",
      "sdk/base/objc/OMSLocalStream+Private.h",
      "sdk/base/objc/OMSLocalStream.mm",
      "sdk/base/objc/OMSMediaFormat+Internal.h",
      "sdk/base/objc/OMSMediaFormat.mm",
      "sdk/base/objc/OMSPeerConnectionDependencyFactory.h",
      "sdk/base/objc/OMSPeerConnectionDependencyFactory.mm",
      "sdk/base/objc/OMSPublishOptions.mm",
      "sdk/base/objc/OMSRemoteStream.mm",
      "sdk/base/objc/OMSStream+Internal.h",
      "sdk/base/objc/OMSStream.mm",
      "sdk/base/objc/ObjcVideoCapturerInterface",
      "sdk/base/objc/ObjcVideoCodecFactory.h",
      "sdk/base/objc/ObjcVideoCodecFactory.mm",
      "sdk/base/objc/RTCPeerConnectionFactory+OMS.h",
      "sdk/base/objc/RTCPeerConnectionFactory+OMS.mm",
      "sdk/base/objc/RemoteStreamObserverObjcImpl.mm",
      "sdk/base/objc/public/OMSErrors.h",
      "sdk/base/objc/public/OMSFrameGeneratorProtocol.h",
      "sdk/base/objc/public/OMSGlobalConfiguration.h",
      "sdk/base/objc/public/OMSLocalCameraStream.h",
      "sdk/base/objc/public/OMSLocalCameraStreamParameters.h",
      "sdk/base/objc/public/OMSLocalCustomizedStream.h",
      "sdk/base/objc/public/OMSLocalCustomizedStreamParameters.h",
      "sdk/base/objc/public/OMSLocalStream.h",
      "sdk/base/objc/public/OMSMediaCodec.h",
      "sdk/base/objc/public/OMSMediaFormat.h",
      "sdk/base/objc/public/OMSRemoteCameraStream.h",
      "sdk/base/objc/public/OMSRemoteScreenStream.h",
      "sdk/base/objc/public/OMSRemoteStream.h",
      "sdk/base/objc/public/OMSStream.h",
      "sdk/base/sysinfoios.mm",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.h",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.mm",
      "sdk/conference/objc/ConferencePublicationObserverObjcImpl.mm",
      "sdk/conference/objc/ConferenceSubscriptionObserverObjcImpl.mm",
      "sdk/conference/objc/OMSConferenceClient.mm",
      "sdk/conference/objc/OMSConferenceClientConfiguration.mm",
      "sdk/conference/objc/OMSConferenceInfo.mm",
      "sdk/conference/objc/OMSConferenceParticipant+Private.h",
      "sdk/conference/objc/OMSConferenceParticipant.mm",
      "sdk/conference/objc/OMSConferencePublication.mm",
      "sdk/conference/objc/OMSConferenceSubscription+Private.h",
      "sdk/conference/objc/OMSConferenceSubscription.mm",
      "sdk/conference/objc/OMSRemoteMixedStream.mm",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.h",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.mm",
      "sdk/conference/objc/public/OMSConferenceClient.h",
      "sdk/conference/objc/public/OMSConferenceClientConfiguration.h",
      "sdk/conference/objc/public/OMSConferenceClientObserver.h",
      "sdk/conference/objc/public/OMSConferenceErrors.h",
      "sdk/conference/objc/public/OMSConferenceParticipant.h",
      "sdk/conference/objc/public/OMSConferenceSubscription.h",
      "sdk/conference/objc/public/OMSRemoteMixedStream.h",
      "sdk/conference/objc/public/OMSRemoteMixedStreamObserver.h",
      "sdk/p2p/objc/OMSP2PClient.m",
      "sdk/p2p/objc/OMSP2PClientConfiguration.m",
      "sdk/p2p/objc/OMSP2PPeerConnectionChannel.h",
      "sdk/p2p/objc/OMSP2PPeerConnectionChannel.mm",
      "sdk/p2p/objc/OMSP2PPublication.m",
      "sdk/p2p/objc/OMSP2PSignalingSenderObjcImpl.h",
      "sdk/p2p/objc/OMSP2PSignalingSenderObjcImpl.mm",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.h",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.mm",
      "sdk/p2p/objc/public/OMSP2PClient.h",
      "sdk/p2p/objc/public/OMSP2PClientConfiguration.h",
      "sdk/p2p/objc/public/OMSP2PErrors.h",
      "sdk/p2p/objc/public/OMSP2PPeerConnectionChannelObserver.h",
      "sdk/p2p/objc/public/OMSP2PSignalingChannelProtocol.h",
      "sdk/p2p/objc/public/OMSP2PSignalingReceiverProtocol.h",
      "sdk/p2p/objc/public/OMSP2PSignalingSenderProtocol.h",
    ]
  }
}
if (woogeen_include_tests) {
  group("woogeen_tests") {
    testonly = true
    # Only the root target should depend on this.
    visibility = [ "//:default" ]
    deps = [
      ":woogeen_unittests",
    ]
  }
  test("woogeen_unittests") {
    testonly = true
    sources = [
      "sdk/base/mediautils_unittest.cc",
      "sdk/test/unittest_main.cc",
    ]
    deps = [
      ":oms_sdk_base",
      "//testing/gmock",
      "//testing/gtest",
    ]
    libs = []
    if (is_win) {
      libs += [
        "amstrmid.lib",
        "d3d9.lib",
        "dmoguids.lib",
        "dxva2.lib",
        "mf.lib",
        "mfplat.lib",
        "mfuuid.lib",
        "msdmo.lib",
        "strmiids.lib",
        "user32.lib",
        "wmcodecdspuuid.lib",
        "ws2_32.lib",
      ]
      if (woogeen_msdk_lib_root != "") {
        libs += [
          "libmfx.lib",
          "sample_common.lib",
        ]
        lib_dirs = [ woogeen_msdk_lib_root ]
      }
      ldflags = [
        "/ignore:4098",
        "/ignore:4099",
      ]
    }
  }
}
