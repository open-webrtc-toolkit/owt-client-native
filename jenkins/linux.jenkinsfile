void setBuildStatus(String nativeUrl, String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: nativeUrl],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/linux"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:"5"))
        timeout(time: 180, unit: "MINUTES")
    }
    stages {
        stage("build and unittest") {
            agent{
                node {
                    label "ubuntu"
                    customWorkspace "$env.linuxCiPath/src"
                }
            }
            steps {
                echo "$GIT_COMMIT"
                sh "${linuxCiPath}/buildSdk.sh ${GIT_COMMIT}"
            }
          }
         }
    post {
        success {
            setBuildStatus("${env.nativeUrl}", "Build succeeded", "SUCCESS");
            echo "I succeeeded!"
            mail to: "$env.mailtoUser",
            subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            body: "Success with ${env.BUILD_URL}"
        }
        unstable {
            echo "I am unstable :/"
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
        failure {
            setBuildStatus("${env.nativeUrl}", "Build failed", "FAILURE");
            echo "I failed :("
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}

