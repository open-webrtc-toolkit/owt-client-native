void setBuildStatus(String nativeUrl, String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: nativeUrl],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/android"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:"5"))
        timeout(time: 40, unit: "MINUTES")
    }
    stages {
        stage("init parameters"){
            steps {
                script {
                    if (env.CHANGE_TARGET == null){
                        env.CHANGE_TARGET = env.GIT_BRANCH
                    }
                }
            }
        }

        stage('Build'){
            agent{
                node {
                    label "${env.androidBuildNativeServer}"
                    customWorkspace "${env.owtClientNativeBasePath}/${env.CHANGE_TARGET}/src"
                }
            }
            steps {
                script{
                    sh "gclient sync"
                    sh "python ${env.owtClientNativeBasePath}/${env.CHANGE_TARGET}/src/scripts/build_android.py"
                    sh "cp -r ${env.owtClientNativeBasePath}/${env.CHANGE_TARGET}/src/out/dist/release/* ${env.remoteDependeceDebugPath}/libwebrtc"
                    if ("${GIT_BRANCH}" == 'master') { 
                        sh "cp -r ${env.owtClientNativeBasePath}/${env.CHANGE_TARGET}/src/out/dist/release/* ${env.andoridLibWebrtcPath}"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                echo "I have finished"
                sh "curl -H \"Content-Type: application/json\" -X POST --data '{\"commit_id\":\"'$GIT_COMMIT'\",\"job_path\":\"'${env.androidNativeJobName}'\",\"job_name\":\"'$JOB_BASE_NAME'\",\"build_num\":\"'$BUILD_NUMBER'\"}' '${env.checkServerUrl}'/runClient/ANDROID_BUILD_NATIVE_STEPS"
            }
        }
        success {
            setBuildStatus("${env.nativeUrl}", "Build succeeded", "SUCCESS");
            echo "I succeeeded!"
            mail to: "$env.mailtoUser",
            subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            body: "Success with ${env.BUILD_URL}"
        }
        unstable {
            echo "I am unstable :/"
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
        failure {
            setBuildStatus("${env.nativeUrl}", "Build failed", "FAILURE");
            echo "I failed :("
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}
