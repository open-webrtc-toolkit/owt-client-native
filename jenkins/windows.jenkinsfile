void setBuildStatus(String nativeUrl, String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: nativeUrl],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/windows"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:"5"))
        timeout(time: 40, unit: "MINUTES")
    }
    stages {
        stage("BuildAndEnv"){
            parallel {
                stage("build") {
                    agent{
                        node {
                            label "windows"
                            customWorkspace "$env.windowsCIPath/src"
                        }
                    }
                    steps {
                        echo "$GIT_COMMIT"
                        bat "%windowsCIPath%/buildSdk.bat %GIT_COMMIT%"
                    }
                }
                stage("startMcu") {
                    agent{
                        node {
                            label "$env.windowsServer"
                        }
                    }
                    steps {
                        script{
                            withEnv(['JENKINS_NODE_COOKIE=dontkill']) {
                                sh "python ${env.startServerScriptPath} --package-url ${env.mcuPackageBaseDir} --package-name \
                                ${env.mcuPackageName}  --base-dir ${env.mcuServerBasePath} --git-branch ${GIT_BRANCH} \
                                --owner open-webrtc-toolkit --repo owt-client-android --commit-id ${GIT_COMMIT} \
                                --github-script ${env.serverGithubScriptPath} --mode mcu --workspace ${WORKSPACE}"
                            }
                        }
                    }
                }
                stage("startP2PServer") {
                    agent{
                        node {
                            label "$env.windowsServer"
                        }
                    }
                    steps{
                        script{
                            withEnv(['JENKINS_NODE_COOKIE=dontkill']) {
                                sh "python ${env.startServerScriptPath} --p2p-server-path ${env.p2pServerPath} \
                                --owner open-webrtc-toolkit --repo owt-client-android --commit-id ${GIT_COMMIT} \
                                --git-branch ${GIT_BRANCH} --github-script ${env.serverGithubScriptPath} --mode p2p --workspace ${WORKSPACE}"
                            }
                        }
                    }
                }
            }
        }
        stage("BulidConference") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Buliding.."
                bat "%windowsConferenceCasePath%/build.bat"
            }
        }
        stage("BulidTestP2P") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Buliding.."
                bat "%windowsP2PCasePath%/build.bat"
            }
        }
        stage("TestConference") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Testing.."
                bat "%windowsConferenceCasePath%/runCase.bat"
            }
        }
        stage("TestP2P") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Testing.."
                bat "%windowsP2PCasePath%/runCase.bat"
            }
        }
    }
    post {
        always {
            script {
                echo "I have finished"
                sh "curl -H \"Content-Type: application/json\" -X POST --data '{\"commit_id\":\"'$GIT_COMMIT'\",\"job_path\":\"'${env.windowsNativeJobName}'\",\"job_name\":\"'$JOB_BASE_NAME'\",\"build_num\":\"'$BUILD_NUMBER'\",\"os_version\":\"'${env.windowsVersion}'\"}' '${env.checkServerUrl}'/runClient/WINDOWS_BUILD_NATIVE_STEPS"
            }
        }
        success {
            setBuildStatus("${env.nativeUrl}", "Build succeeded", "SUCCESS");
            echo "I succeeeded!"
            mail to: "$env.mailtoUser",
            subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            body: "Success with ${env.BUILD_URL}"
        }
        unstable {
            echo "I am unstable :/"
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
        failure {
            setBuildStatus("${env.nativeUrl}", "Build failed", "FAILURE");
            echo "I failed :("
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}

